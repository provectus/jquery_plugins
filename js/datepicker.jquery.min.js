(function() {
  (function($) {
    return $.constants = {
      keyCodes: {
        UP: 38,
        DOWN: 40,
        LEFT: 37,
        RIGHT: 39,
        PAGEUP: 33,
        PAGEDOWN: 34,
        SPACE: 32,
        ENTER: 13,
        ESC: 27,
        BACKSPACE: 8
      },
      monthes: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      daysOfWeek: {
        short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        full: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
      }
    };
  })(jQuery);

}).call(this);
;(function() {
  (function($) {
    if ($.fn.__old_val != null) {
      return;
    }
    $.fn.__old_val = $.fn.val;
    return $.fn.val = function() {
      var custom_val;
      custom_val = this.data('custom_val');
      if (custom_val != null) {
        return custom_val.apply(this, arguments);
      } else {
        return this.__old_val.apply(this, arguments);
      }
    };
  })(jQuery);

}).call(this);
;(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    return $.fn.mutations = function(options) {
      var MutationObserver, defaults;
      defaults = {
        chlildren: false,
        attributes: false,
        subtree: false,
        filter: []
      };
      options = $.extend(defaults, options);
      MutationObserver = window.MutationObserver || window.MozMutationObserver || window.WebKitMutationObserver;
      return this.each(function() {
        var observer, observerOptions;
        if (MutationObserver != null) {
          observer = new MutationObserver(function(mutations) {
            var e, key, mutation, node, target, _i, _len, _ref, _results;
            _results = [];
            for (key in mutations) {
              mutation = mutations[key];
              target = $(mutation.target);
              if (mutation.type === 'childList') {
                _ref = mutation.addedNodes;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  node = _ref[_i];
                  e = $.Event('child_added', {
                    node: node
                  });
                  target.trigger(e);
                }
                _results.push((function() {
                  var _j, _len1, _ref1, _results1;
                  _ref1 = mutation.removedNodes;
                  _results1 = [];
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    node = _ref1[_j];
                    e = $.Event('child_removed', {
                      node: node
                    });
                    _results1.push(target.trigger(e));
                  }
                  return _results1;
                })());
              } else if (mutation.type === 'attributes') {
                e = $.Event('attribute_changed', {
                  attribute: mutation.attributeName,
                  oldValue: mutation.oldValue
                });
                _results.push(target.trigger(e));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
          observerOptions = {
            childList: options.children,
            attributes: options.attributes,
            characterData: false,
            subtree: options.subtree,
            attributeOldValue: options.attributes,
            characterDataOldValue: false,
            attributeFilter: options.filter.length ? options.filter : void 0
          };
          return observer.observe(this, observerOptions);
        } else if (this.addEventListener != null) {
          if (options.children === true) {
            this.addEventListener('DOMNodeInserted', $.proxy(function(event) {
              var e;
              if (event.relatedNode === this || (event.relatedNode !== this && options.subtree === true)) {
                e = $.Event('child_added', {
                  node: event.target
                });
                return $(event.relatedNode).trigger(e);
              }
            }, this));
            this.addEventListener('DOMNodeRemoved', function(event) {
              var e;
              if (event.relatedNode === this || (event.relatedNode !== this && options.subtree === true)) {
                e = $.Event('child_removed', {
                  node: event.target
                });
                return $(event.relatedNode).trigger(e);
              }
            });
          }
          if (options.attributes === true) {
            return this.addEventListener('DOMAttrModified', function(event) {
              var e, _ref;
              if (options.filter.length && (_ref = event.attrName, __indexOf.call(options.filter, _ref) >= 0)) {
                if (event.srcElement === this || (event.srcElement !== this && options.subtree === true)) {
                  e = $.Event('attribute_changed', {
                    attribute: event.attrName,
                    oldValue: event.prevValue
                  });
                  return $(event.srcElement).trigger(e);
                }
              }
            }, false);
          }
        }
      });
    };
  })(jQuery);

}).call(this);
;(function() {
  (function($) {
    return $.fn.datepicker = function(options) {
      var day_tmpl, days_of_week, defaults, monthes, other_month_class, template, week_tmpl;
      defaults = {
        week_starts: 0,
        access_past: true,
        _default: null
      };
      options = $.extend(defaults, options);
      template = '<div class="s-calendar" tabindex="0">\
                            <div class="s-calendar__container">\
                                <div class="s-calendar__header">\
                                    <span class="month"></span>\
                                    <span class="year"></span>\
                                    <button class="s-calendar__btn prev" tabindex="-1"></button>\
                                    <button class="s-calendar__btn next" tabindex="-1"></button>\
                                </div>\
                                <table class="s-calendar__table">\
                                    <thead><tr></tr></thead>\
                                    <tbody></tbody>\
                                </table>\
                            </div>\
                        </div>';
      week_tmpl = '<th></th>';
      other_month_class = 'other-month';
      day_tmpl = '<td></td>';
      days_of_week = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
      monthes = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      this.each(function() {
        var $this, current_date, disable, enable, fill_caption, fill_head, fill_month, first_month_day, format_date, format_number, get_selected, mark_date, navigate_month, parse_date, redraw, select_date, start_date,
          _this = this;
        $this = $(this);
        $this.hide();
        this.datepicker = $(template);
        $this.before(this.datepicker);
        $this.data('custom_val', function(value) {
          var ret;
          if (value == null) {
            value = null;
          }
          ret = this.__old_val.apply(this, arguments);
          if (value != null) {
            redraw(parse_date(value));
          }
          return ret;
        });
        parse_date = function(str) {
          var splitted;
          if (!/^\d{4}\-\d{2}-\d{2}$/.test(str)) {
            return new Date;
          }
          splitted = str.split('-');
          return new Date(parseInt(splitted[0], 10), parseInt(splitted[1], 10) - 1, parseInt(splitted[2], 10));
        };
        format_date = function(timestamp) {
          var d;
          d = new Date(timestamp);
          return "" + (d.getFullYear()) + "-" + (format_number(d.getMonth() + 1)) + "-" + (format_number(d.getDate()));
        };
        format_number = function(number) {
          return ('00' + number.toString()).substr(-2);
        };
        first_month_day = function(month, year) {
          var d;
          d = new Date(year, month, 1);
          return d.getDay();
        };
        start_date = function(month, year) {
          var days_in_previous, first_day;
          first_day = first_month_day(month, year);
          days_in_previous = first_day - options.week_starts;
          days_in_previous = days_in_previous < 0 ? 7 + days_in_previous : days_in_previous;
          return new Date(year, month, 1 - days_in_previous);
        };
        fill_head = function(start_day) {
          var add_day, head, i, _i, _j, _ref, _results;
          head = _this.datepicker.find('.s-calendar__table thead tr');
          head.empty();
          add_day = function(day) {
            return $(week_tmpl).appendTo(head).text(days_of_week[day]);
          };
          for (i = _i = start_day; start_day <= 6 ? _i <= 6 : _i >= 6; i = start_day <= 6 ? ++_i : --_i) {
            add_day(i);
          }
          if (start_day !== 0) {
            _results = [];
            for (i = _j = 0, _ref = start_day - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
              _results.push(add_day(i));
            }
            return _results;
          }
        };
        fill_month = function(current) {
          var $day, current_week, d, day, i, month, start_day, table, today, year, _i, _results;
          start_day = start_date(current.getMonth(), current.getFullYear());
          day = start_day.getDate();
          month = start_day.getMonth();
          year = start_day.getFullYear();
          table = _this.datepicker.find('.s-calendar__table tbody');
          table.empty();
          current_week = null;
          today = new Date().getTime() - 3600 * 24 * 1000;
          _results = [];
          for (i = _i = 0; _i <= 41; i = ++_i) {
            d = new Date(year, month, parseInt(day) + i);
            if (d.getDay() === options.week_starts) {
              current_week = $('<tr></tr>').appendTo(table);
            }
            $day = $(day_tmpl).appendTo(current_week).text(d.getDate());
            if (d.getMonth() !== current.getMonth()) {
              $day.addClass(other_month_class);
            }
            if (today > d.getTime() && !options.access_past) {
              $day.addClass(other_month_class + ' disabled');
            }
            $day.data('date', d);
            if (d.getDate() === current.getDate() && d.getMonth() === current.getMonth()) {
              _results.push($day.addClass('current'));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        fill_caption = function(date) {
          var month, year;
          month = monthes[date.getMonth()];
          year = date.getFullYear();
          _this.datepicker.find('.s-calendar__header .year').text(year);
          return _this.datepicker.find('.s-calendar__header .month').text(month);
        };
        select_date = function(date, silent) {
          if (silent == null) {
            silent = false;
          }
          _this.datepicker.data('selected', date);
          _this.value = format_date(date);
          if (silent === false) {
            return $this.trigger('change');
          }
        };
        get_selected = function() {
          return _this.datepicker.data('selected');
        };
        redraw = function(date, silent) {
          if (silent == null) {
            silent = false;
          }
          fill_month(date);
          fill_caption(date);
          return select_date(date, silent);
        };
        navigate_month = function(new_month_func) {
          return function(event) {
            var cur, d;
            if ($(event.target).closest('.s-calendar').data('disabled')) {
              return false;
            }
            cur = get_selected();
            d = new Date(cur.getFullYear(), new_month_func(cur.getMonth()), cur.getDate());
            redraw(d, true);
            return false;
          };
        };
        mark_date = function(element) {
          var date;
          if (element.closest('.s-calendar').data('disabled')) {
            return;
          }
          date = element.data('date');
          if (element.hasClass('other-month')) {
            return redraw(date);
          } else {
            element.removeClass('active');
            element.closest('tbody').find('td').removeClass('current');
            element.addClass('current');
            return select_date(date);
          }
        };
        disable = function() {
          _this.datepicker.addClass('disabled');
          _this.datepicker.find('.s-calendar__header .prev, .s-calendar__header .next, .s-calendar__table td').css('cursor', 'default');
          _this.datepicker.data('disabled', true);
          return _this.datepicker.attr('tabindex', -1);
        };
        enable = function() {
          _this.datepicker.removeClass('disabled');
          _this.datepicker.find('.s-calendar__header .prev, .s-calendar__header .next, .s-calendar__table td').css('cursor', 'pointer');
          _this.datepicker.data('disabled', false);
          return _this.datepicker.attr('tabindex', 0);
        };
        if (options._default != null) {
          current_date = parse_date(options._default);
        } else if ($this.val() !== '') {
          current_date = parse_date($this.val());
        } else {
          current_date = new Date;
        }
        fill_head(options.week_starts);
        redraw(current_date);
        if ($this.is(':disabled')) {
          disable();
        }
        $this.mutations({
          attributes: true,
          filter: ['disabled']
        });
        $this.on('attribute_changed', function(event) {
          if (!!$(event.target).prop('disabled') === true) {
            return disable();
          } else {
            return enable();
          }
        });
        this.datepicker.on('mouseenter', '.s-calendar__table tbody td', function(event) {
          var $target;
          $target = $(event.target);
          $target.closest('tbody').find('td').removeClass('active');
          if (!$target.hasClass('disabled')) {
            return $target.addClass('active');
          }
        });
        this.datepicker.on('mouseleave', '.s-calendar__table tbody td', function(event) {
          return $(event.target).removeClass('active');
        });
        this.datepicker.on('click', '.s-calendar__table tbody td', function(event) {
          var $target;
          $target = $(event.target);
          if (!$target.hasClass('disabled')) {
            return mark_date($target);
          }
        });
        this.datepicker.on('click', '.s-calendar__header .prev', navigate_month(function(m) {
          return m - 1;
        }));
        this.datepicker.on('click', '.s-calendar__header .next', navigate_month(function(m) {
          return m + 1;
        }));
        return this.datepicker.on('keydown', function(event) {
          var $target, cur_tr, d, difference, el, idx, last_day, next_td, next_tr, prev_td, prev_tr, selected_cell;
          $target = $(event.target);
          switch (event.keyCode) {
            case $.constants.keyCodes.UP:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              cur_tr = selected_cell.closest('tr');
              idx = cur_tr.find('td').index(selected_cell);
              prev_tr = cur_tr.prev();
              if (prev_tr.size() && prev_tr.prop('nodeName').toLowerCase() === 'tr') {
                el = prev_tr.find('td').eq(idx);
                mark_date(el);
              } else {
                d = selected_cell.data('date');
                last_day = new Date(d.getFullYear(), d.getMonth(), 0);
                difference = 7 - Math.abs(d.getDay() - last_day.getDay());
                difference = difference === 7 ? 0 : difference;
                redraw(new Date(last_day.getFullYear(), last_day.getMonth(), last_day.getDate() - difference));
              }
              return event.preventDefault();
            case $.constants.keyCodes.DOWN:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              cur_tr = selected_cell.closest('tr');
              idx = cur_tr.find('td').index(selected_cell);
              next_tr = cur_tr.next();
              if (next_tr.size() && next_tr.prop('nodeName').toLowerCase() === 'tr') {
                el = next_tr.find('td').eq(idx);
                mark_date(el);
              }
              return event.preventDefault();
            case $.constants.keyCodes.LEFT:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              prev_td = selected_cell.prev();
              if (prev_td.size() && prev_td.prop('nodeName').toLowerCase() === 'td') {
                mark_date(prev_td);
              } else {
                cur_tr = selected_cell.closest('tr');
                prev_tr = cur_tr.prev();
                if (prev_tr.size() && prev_tr.prop('nodeName').toLowerCase() === 'tr') {
                  el = prev_tr.find('td:last');
                  mark_date(el);
                } else {
                  d = selected_cell.data('date');
                  redraw(new Date(d.getFullYear(), d.getMonth(), 0));
                }
              }
              return event.preventDefault();
            case $.constants.keyCodes.RIGHT:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              next_td = selected_cell.next();
              if (next_td.size() && next_td.prop('nodeName').toLowerCase() === 'td') {
                mark_date(next_td);
              } else {
                cur_tr = selected_cell.closest('tr');
                next_tr = cur_tr.next();
                if (next_tr.size() && next_tr.prop('nodeName').toLowerCase() === 'tr') {
                  el = next_tr.find('td:first');
                  mark_date(el);
                }
              }
              return event.preventDefault();
            case $.constants.keyCodes.PAGEUP:
              navigate_month(function(m) {
                return m - 1;
              })(event);
              return event.preventDefault();
            case $.constants.keyCodes.PAGEDOWN:
              navigate_month(function(m) {
                return m + 1;
              })(event);
              return event.preventDefault();
            default:
              return true;
          }
        });
      });
      return this;
    };
  })(jQuery);

}).call(this);
;(function() {
  (function($) {
    return $.fn.datetimepicker = function(options) {
      var day_tmpl, days_of_week, defaults, monthes, other_month_class, template, week_tmpl;
      defaults = {
        week_starts: 1,
        _default: null
      };
      options = $.extend(defaults, options);
      template = '<div class="s-calendar" tabindex="0">\
                        <div class="s-calendar__container">\
                            <div class="s-calendar__header">\
                                <span class="month"></span>\
                                <span class="year"></span>\
                                <button class="s-calendar__btn prev" tabindex="-1"></button>\
                                <button class="s-calendar__btn next" tabindex="-1"></button>\
                            </div>\
                            <table class="s-calendar__table">\
                                <thead><tr></tr></thead>\
                                <tbody></tbody>\
                            </table>\
                        </div>\
                        <div class="s-calendar__time">\
                            <div class="s-calendar__title">HOURS</div>\
                            <div class="s-calendar__hours s-calendar__group">\
                                <div class="s-calendar__row">\
                                    <button>1</button>\
                                    <button>2</button>\
                                    <button>3</button>\
                                    <button>4</button>\
                                </div>\
                                <div class="s-calendar__row">\
                                    <button>5</button>\
                                    <button>6</button>\
                                    <button>7</button>\
                                    <button>8</button>\
                                </div>\
                                <div class="s-calendar__row">\
                                    <button>9</button>\
                                    <button>10</button>\
                                    <button>11</button>\
                                    <button>12</button>\
                                </div>\
                            </div>\
\
                            <hr class="s-calendar__hr"/>\
                            <div class="s-calendar__title">AM/PM</div>\
                            <div class="s-calendar__row s-calendar__ampm s-calendar__group">\
                                <button>AM</button>\
                                <button>PM</button>\
                            </div>\
\
                            <hr class="s-calendar__hr"/>\
                            <div class="s-calendar__title">MINUTES</div>\
                            <div class="s-calendar__row s-calendar__min s-calendar__group">\
                                <button>0</button>\
                                <button>15</button>\
                                <button>30</button>\
                                <button>45</button>\
                            </div>\
                            <hr class="s-calendar__hr"/>\
                            <div class="s-calendar__row">\
                                <button class="s-calendar__close">Set</button>\
                            </div>\
                        </div>\
                    </div>';
      week_tmpl = '<th></th>';
      other_month_class = 'other-month';
      day_tmpl = '<td></td>';
      days_of_week = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
      monthes = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      this.each(function() {
        var $this, current_date, disable, enable, fill_caption, fill_head, fill_month, fill_time, first_month_day, formatAMPM, format_date, format_number, get_selected, mark_date, navigate_month, parse_date, redraw, select_date, start_date,
          _this = this;
        $this = $(this);
        $this.hide();
        this.datepicker = $(template);
        $this.before(this.datepicker);
        $this.data('custom_val', function(value) {
          var ret;
          if (value == null) {
            value = null;
          }
          ret = this.__old_val.apply(this, arguments);
          if (value != null) {
            redraw(parse_date(value));
          }
          return ret;
        });
        parse_date = function(str) {
          var date, splitted, time;
          if (!/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}(:\d{2})?$/.test(str)) {
            return new Date;
          }
          splitted = str.split(' ');
          date = splitted[0].split('-');
          time = splitted[1].split(':');
          time[0] = parseInt(time[0]);
          return new Date(parseInt(date[0], 10), parseInt(date[1], 10) - 1, parseInt(date[2], 10), parseInt(time[0], 10), parseInt(time[1], 10));
        };
        format_date = function(timestamp) {
          var d, t;
          d = new Date(timestamp);
          t = formatAMPM(d);
          return "" + (d.getFullYear()) + "-" + (format_number(d.getMonth() + 1)) + "-" + (format_number(d.getDate())) + " " + t.hours24 + ":" + t.minutes;
        };
        format_number = function(number) {
          return ('00' + number.toString()).substr(-2);
        };
        formatAMPM = function(date) {
          var ampm, hours;
          hours = date.getHours();
          ampm = hours >= 12 ? 'pm' : 'am';
          hours = hours % 12;
          if (!hours) {
            hours = 12;
          }
          return {
            hours: format_number(hours),
            hours24: format_number(date.getHours()),
            minutes: format_number(date.getMinutes()),
            ampm: ampm
          };
        };
        first_month_day = function(month, year) {
          var d;
          d = new Date(year, month, 1);
          return d.getDay();
        };
        start_date = function(month, year) {
          var days_in_previous, first_day;
          first_day = first_month_day(month, year);
          days_in_previous = first_day - options.week_starts;
          days_in_previous = days_in_previous < 0 ? 7 + days_in_previous : days_in_previous;
          return new Date(year, month, 1 - days_in_previous);
        };
        fill_head = function(start_day) {
          var add_day, head, i, _i, _j, _ref, _results;
          head = _this.datepicker.find('.s-calendar__table thead tr');
          head.empty();
          add_day = function(day) {
            return $(week_tmpl).appendTo(head).text(days_of_week[day]);
          };
          for (i = _i = start_day; start_day <= 6 ? _i <= 6 : _i >= 6; i = start_day <= 6 ? ++_i : --_i) {
            add_day(i);
          }
          _results = [];
          for (i = _j = 0, _ref = start_day - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
            _results.push(add_day(i));
          }
          return _results;
        };
        fill_month = function(current) {
          var $day, current_week, d, day, i, month, start_day, table, year, _i, _results;
          start_day = start_date(current.getMonth(), current.getFullYear());
          day = start_day.getDate();
          month = start_day.getMonth();
          year = start_day.getFullYear();
          table = _this.datepicker.find('.s-calendar__table tbody');
          table.empty();
          current_week = null;
          _results = [];
          for (i = _i = 0; _i <= 41; i = ++_i) {
            d = new Date(year, month, parseInt(day) + i);
            if (d.getDay() === options.week_starts) {
              current_week = $('<tr></tr>').appendTo(table);
            }
            $day = $(day_tmpl).appendTo(current_week).text(d.getDate());
            if (d.getMonth() !== current.getMonth()) {
              $day.addClass(other_month_class);
            }
            $day.data('date', d);
            if (d.getDate() === current.getDate() && d.getMonth() === current.getMonth()) {
              _results.push($day.addClass('current'));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        fill_time = function(current) {
          var hours_index, minutes_index, t;
          t = formatAMPM(current);
          hours_index = parseInt(t.hours) - 1;
          minutes_index = Math.round(parseInt(t.minutes) / 15);
          if (minutes_index === 4) {
            hours_index += 1;
            minutes_index = 3;
          }
          _this.datepicker.find(".s-calendar__time button").removeClass('active');
          _this.datepicker.find(".s-calendar__hours button:eq(" + hours_index + ")").addClass('active');
          _this.datepicker.find(".s-calendar__min button:eq(" + minutes_index + ")").addClass('active');
          return _this.datepicker.find(".s-calendar__ampm button:contains('" + (t.ampm.toUpperCase()) + "')").addClass('active');
        };
        fill_caption = function(date) {
          var month, year;
          month = monthes[date.getMonth()];
          year = date.getFullYear();
          _this.datepicker.find('.s-calendar__header .year').text(year);
          return _this.datepicker.find('.s-calendar__header .month').text(month);
        };
        select_date = function(date, silent) {
          var ampm, hours, minutes;
          if (silent == null) {
            silent = false;
          }
          minutes = parseInt(_this.datepicker.find(".s-calendar__min .active").text());
          hours = parseInt(_this.datepicker.find(".s-calendar__hours .active").text());
          ampm = _this.datepicker.find(".s-calendar__ampm .active").text();
          if (ampm === "PM") {
            hours += 12;
          }
          if (hours === 24) {
            hours = 0;
          }
          date.setMinutes(minutes);
          date.setHours(hours);
          _this.datepicker.data('selected', date);
          console.log(date, format_date(date));
          _this.value = format_date(date);
          console.log(_this.value, $(_this).val());
          if (silent === false) {
            return $this.trigger('change');
          }
        };
        get_selected = function() {
          return _this.datepicker.data('selected');
        };
        redraw = function(date, silent) {
          if (silent == null) {
            silent = false;
          }
          fill_month(date);
          fill_caption(date);
          fill_time(date);
          return select_date(date, silent);
        };
        navigate_month = function(new_month_func) {
          return function(event) {
            var cur, d;
            if ($(event.target).closest('.s-calendar').data('disabled')) {
              return false;
            }
            cur = get_selected();
            d = new Date(cur.getFullYear(), new_month_func(cur.getMonth()), cur.getDate());
            redraw(d, true);
            return false;
          };
        };
        mark_date = function(element) {
          var date;
          if (element.closest('.s-calendar').data('disabled')) {
            return;
          }
          date = element.data('date');
          if (element.hasClass('other-month')) {
            return redraw(date);
          } else {
            element.removeClass('active');
            element.closest('tbody').find('td').removeClass('current');
            element.addClass('current');
            return select_date(date, true);
          }
        };
        disable = function() {
          _this.datepicker.addClass('disabled');
          _this.datepicker.find('.s-calendar__header .prev, .s-calendar__header .next, .s-calendar__table td').css('cursor', 'default');
          _this.datepicker.data('disabled', true);
          return _this.datepicker.attr('tabindex', -1);
        };
        enable = function() {
          _this.datepicker.removeClass('disabled');
          _this.datepicker.find('.s-calendar__header .prev, .s-calendar__header .next, .s-calendar__table td').css('cursor', 'pointer');
          _this.datepicker.data('disabled', false);
          return _this.datepicker.attr('tabindex', 0);
        };
        if (options._default != null) {
          current_date = parse_date(options._default);
        } else if ($this.val() !== '') {
          current_date = parse_date($this.val());
        } else {
          current_date = new Date;
        }
        if (options.hide_date) {
          this.datepicker.find(".s-calendar__container").hide();
        }
        fill_head(options.week_starts);
        redraw(current_date);
        if ($this.is(':disabled')) {
          disable();
        }
        $this.mutations({
          attributes: true,
          filter: ['disabled']
        });
        $this.on('attribute_changed', function(event) {
          if (!!$(event.target).prop('disabled') === true) {
            return disable();
          } else {
            return enable();
          }
        });
        this.datepicker.on('mouseenter', '.s-calendar__table tbody td', function(event) {
          var $target;
          $target = $(event.target);
          $target.closest('tbody').find('td').removeClass('active');
          return $target.addClass('active');
        });
        this.datepicker.on('mouseleave', '.s-calendar__table tbody td', function(event) {
          return $(event.target).removeClass('active');
        });
        this.datepicker.on('click', '.s-calendar__table tbody td', function(event) {
          var $target;
          $target = $(event.target);
          return mark_date($target);
        });
        this.datepicker.on('click', '.s-calendar__header .prev', navigate_month(function(m) {
          return m - 1;
        }));
        this.datepicker.on('click', '.s-calendar__header .next', navigate_month(function(m) {
          return m + 1;
        }));
        this.datepicker.on('click', '.s-calendar__time button:not(.s-calendar__close)', function(event) {
          var $target;
          $target = $(event.target);
          if ($(event.target).closest('.s-calendar').data('disabled')) {
            return false;
          }
          $target.closest('.s-calendar__group').find('button').removeClass('active');
          $target.addClass('active');
          return select_date(_this.datepicker.data('selected'), true);
        });
        this.datepicker.on('click', '.s-calendar__close', function() {
          return select_date(_this.datepicker.data('selected'));
        });
        return this.datepicker.on('keydown', function(event) {
          var $target, cur_tr, d, difference, el, idx, last_day, next_td, next_tr, prev_td, prev_tr, selected_cell;
          $target = $(event.target);
          switch (event.keyCode) {
            case $.constants.keyCodes.UP:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              cur_tr = selected_cell.closest('tr');
              idx = cur_tr.find('td').index(selected_cell);
              prev_tr = cur_tr.prev();
              if (prev_tr.size() && prev_tr.prop('nodeName').toLowerCase() === 'tr') {
                el = prev_tr.find('td').eq(idx);
                mark_date(el);
              } else {
                d = selected_cell.data('date');
                last_day = new Date(d.getFullYear(), d.getMonth(), 0);
                difference = 7 - Math.abs(d.getDay() - last_day.getDay());
                difference = difference === 7 ? 0 : difference;
                redraw(new Date(last_day.getFullYear(), last_day.getMonth(), last_day.getDate() - difference));
              }
              return event.preventDefault();
            case $.constants.keyCodes.DOWN:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              cur_tr = selected_cell.closest('tr');
              idx = cur_tr.find('td').index(selected_cell);
              next_tr = cur_tr.next();
              if (next_tr.size() && next_tr.prop('nodeName').toLowerCase() === 'tr') {
                el = next_tr.find('td').eq(idx);
                mark_date(el);
              }
              return event.preventDefault();
            case $.constants.keyCodes.LEFT:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              prev_td = selected_cell.prev();
              if (prev_td.size() && prev_td.prop('nodeName').toLowerCase() === 'td') {
                mark_date(prev_td);
              } else {
                cur_tr = selected_cell.closest('tr');
                prev_tr = cur_tr.prev();
                if (prev_tr.size() && prev_tr.prop('nodeName').toLowerCase() === 'tr') {
                  el = prev_tr.find('td:last');
                  mark_date(el);
                } else {
                  d = selected_cell.data('date');
                  redraw(new Date(d.getFullYear(), d.getMonth(), 0));
                }
              }
              return event.preventDefault();
            case $.constants.keyCodes.RIGHT:
              selected_cell = $target.closest('.s-calendar').find('.s-calendar__table tbody td.current');
              next_td = selected_cell.next();
              if (next_td.size() && next_td.prop('nodeName').toLowerCase() === 'td') {
                mark_date(next_td);
              } else {
                cur_tr = selected_cell.closest('tr');
                next_tr = cur_tr.next();
                if (next_tr.size() && next_tr.prop('nodeName').toLowerCase() === 'tr') {
                  el = next_tr.find('td:first');
                  mark_date(el);
                }
              }
              return event.preventDefault();
            case $.constants.keyCodes.PAGEUP:
              navigate_month(function(m) {
                return m - 1;
              })(event);
              return event.preventDefault();
            case $.constants.keyCodes.PAGEDOWN:
              navigate_month(function(m) {
                return m + 1;
              })(event);
              return event.preventDefault();
            default:
              return true;
          }
        });
      });
      return this;
    };
  })(jQuery);

}).call(this);
